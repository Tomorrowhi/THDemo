package com.tomorrowhi.thdemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tomorrowhi.thdemo.bean.LastMsgInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "last_msg_info".
*/
public class LastMsgInfoDao extends AbstractDao<LastMsgInfo, Long> {

    public static final String TABLENAME = "last_msg_info";

    /**
     * Properties of entity LastMsgInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Msg_id = new Property(0, Long.class, "msg_id", true, "_id");
        public final static Property Msg_type = new Property(1, int.class, "msg_type", false, "MSG_TYPE");
        public final static Property Device_id = new Property(2, Long.class, "device_id", false, "DEVICE_ID");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property Is_read = new Property(6, boolean.class, "is_read", false, "IS_READ");
    }


    public LastMsgInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LastMsgInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"last_msg_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: msg_id
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 1: msg_type
                "\"DEVICE_ID\" INTEGER," + // 2: device_id
                "\"CREATE_TIME\" TEXT," + // 3: create_time
                "\"CONTENT\" TEXT," + // 4: content
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"IS_READ\" INTEGER NOT NULL );"); // 6: is_read
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"last_msg_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastMsgInfo entity) {
        stmt.clearBindings();
 
        Long msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindLong(1, msg_id);
        }
        stmt.bindLong(2, entity.getMsg_type());
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(3, device_id);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getIs_read() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastMsgInfo entity) {
        stmt.clearBindings();
 
        Long msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindLong(1, msg_id);
        }
        stmt.bindLong(2, entity.getMsg_type());
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(3, device_id);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getIs_read() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LastMsgInfo readEntity(Cursor cursor, int offset) {
        LastMsgInfo entity = new LastMsgInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // msg_id
            cursor.getInt(offset + 1), // msg_type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // device_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.getShort(offset + 6) != 0 // is_read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastMsgInfo entity, int offset) {
        entity.setMsg_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg_type(cursor.getInt(offset + 1));
        entity.setDevice_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_read(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LastMsgInfo entity, long rowId) {
        entity.setMsg_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LastMsgInfo entity) {
        if(entity != null) {
            return entity.getMsg_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastMsgInfo entity) {
        return entity.getMsg_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
